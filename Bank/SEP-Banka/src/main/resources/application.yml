
server:
  servlet:
    context-path: /api
  port: 8080
  ssl:
    key-store: classpath:stores/keystore.p12
    key-store-password: pass348
    key-store-type: PKCS12
    key-alias: acquirer_bank
    # trust-store: classpath:stores/truststore.p12
    # trust-store-password: pass834
    # trust-store-type: PKCS12
    protocol: TLS
    enabled-protocols: TLSv1.2
    ciphers: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
    # Za definisanje ovoga, treba prethodno iskoristi kod u PkiApplication klasi, koja izlistava sve podrzane
    # chipers u Javi instaliranoj na nasem racunaru
    # Kod je pronadjen na: https://stackoverflow.com/questions/48934210/java-ssl-error-cannot-support-tls-ecdhe-rsa-with-aes-256-gcm-sha384
    client-auth: want
    # for two way authentication, use value: need


bin: 12345


spring:
  application:
    name:  acquirer-bank
  #Spring DataSource
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:myDb;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password:
    #korisno ako je konekcija dugo u idle stanju
    testWhileIdle: true
    validationQuery: SELECT 1
  #Ukljucivanje konzole
  h2:
    console:
      enabled: true
      #Putanja na kojoj ce konzola biti dostupna
      path: /h2-console
  #JPA-Hibernate - prikazuje SQL upite
  jpa:
    show-sql: true
    #kreira tabele na osnovu anotacija @Entity i kada aplikacija zavrsi sa radom, dropuje ih
    hibernate:
      ddl-auto: create-drop
      #bira najbolje konvencije imenovanja za tabele i polja u bazi
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    #optimizacija za h2 upite
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect

#konekcija na bazu je jdbc:h2:mem:myDb
